split_lines raw_text
    
    lines = raw_text.split('\n')
#     print("raw lines\n")
#     print(lines)
    while '' in lines: lines.remove('')
    return lines
      
group_defs lines

    # somehow group the lines together to resemble definitions
    # look for return statement?
    chunks = []
    
    chunk = []
    
#     print("\ngrouping\n")
#     print(lines)
    
    for line in lines:
        chunk.append(line)
    
#         return marks the end of chunk for now, later it will just be end of tabbing
# how to handle special pipe lines>
        if ('return' in line) and '#' not in line and "'return'" not in line:
            chunks.append(chunk)
            chunk = []
            
    # scan from the bottom up to construct pipe
    lines.reverse()
    
    pipe_chunk = []
    
    for line in lines:
        if('return' in line):
            break
        else:
            pipe_chunk.append(line)
        
    return chunks, pipe_chunk

compile_defs chunks pipe_chunk
    
    for i, lines in enumerate(chunks):
    
        # change arguments so that they are comma seperated
        tokens = lines[0].split(' ')

        name = tokens[0]
        args = ','.join(tokens[1:])

        lines[0] = "def " + name + "(" + args + "):"
        
        chunks[i] = lines
    return chunks, pipe_chunk
	
compile_pipe chunks pipe_chunk

    result = []
    
    for line in pipe_chunk:
        result.append(line + ',')
        
    # need to find a way to insert this at this step instead of passing it through
    # assume if it is not given that it is the file name
    name = "compiler"
        
    result.insert(0, name + ' = __pipe__.Pipe(')
    result.append(')')
    chunks.append(result)
    return chunks

join_lines chunks
    
    result = []
    
    for lines in chunks:
        lines.append('\n')
    
    for lines in chunks:
        result.append('\n'.join(lines))
    return '\n'.join(result)

import_pipe result
    return "import pipe as __pipe__\n\n" + result

split_lines
group_defs
compile_defs
compile_pipe
join_lines
import_pipe
